// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package twilioconnector.actions;

import java.util.ArrayList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.twilio.sdk.TwilioRestClient;
import com.twilio.sdk.resource.factory.SmsFactory;
import com.twilio.sdk.resource.instance.Account;

/**
 * Message - The body of your SMS message
 * 
 * To - Telephone number to send the message to.
 * 
 * From - A valid phone number in your account.
 */
public class SendOutgoingMessage extends CustomJavaAction<Boolean>
{
	private String Account_SID;
	private String Account_token;
	private String Message;
	private String From;
	private String To;

	public SendOutgoingMessage(IContext context, String Account_SID, String Account_token, String Message, String From, String To)
	{
		super(context);
		this.Account_SID = Account_SID;
		this.Account_token = Account_token;
		this.Message = Message;
		this.From = From;
		this.To = To;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		if(this.Account_SID == null || this.Account_SID.isEmpty() || this.Account_token == null || this.Account_token.isEmpty()) {
			throw new IllegalArgumentException("Account SID and/or token shouldn't be empty");
		}
		
	    TwilioRestClient client = new TwilioRestClient(this.Account_SID , this.Account_token);

	    final Account mainAccount = client.getAccount();
	    
	    // Build a filter for the MessageList
	    final SmsFactory messageFactory = mainAccount.getSmsFactory();
	    final List<NameValuePair> messageParams = new ArrayList<NameValuePair>();
	    messageParams.add(new BasicNameValuePair("Body", this.Message));
	    messageParams.add(new BasicNameValuePair("To", this.To));
	    messageParams.add(new BasicNameValuePair("From", this.From));

	    messageFactory.create(messageParams);
	    
	    return true;
		  
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "SendOutgoingMessage";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
